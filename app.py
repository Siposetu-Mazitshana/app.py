# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T7kLQROvOV7WEmC2gfDJ9z2LB9GbO1t0
"""
import os
import google.generativeai as genai
from fpdf import FPDF

# 🔑 Set your Gemini API key here
genai.configure(api_key="AIzaSyDGDivFa-0KGtbt8f_gEb-AWbiK4vC5n6g")

# 📄 Prompt templates
def generate_product_description(product, features, tone, audience):
    return f"""
    You are a professional marketing copywriter.
    Write a compelling product description for the following:

    Product: {product}
    Features: {features}
    Target Audience: {audience}
    Tone of Voice: {tone}

    Keep it concise (2-3 sentences).
    """

# 🧠 Call Gemini API
def call_gemini(prompt):
    try:
        model = genai.GenerativeModel("gemini-pro")
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"❌ Error generating content: {e}"

# 💾 Save output as PDF
def save_as_pdf(text, filename="output.pdf"):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    for line in text.split("\n"):
        pdf.multi_cell(0, 10, line)
    pdf.output(filename)

# ▶️ Main script
if __name__ == "__main__":
    print("🛍️ AI Marketing Copy Generator")

    # 👇 Collect user input
    product = input("Enter product name: ")
    features = input("Enter key features: ")
    tone = input("Enter tone (e.g., friendly, elegant): ")
    audience = input("Enter target audience: ")

    # 🔧 Generate prompt & call API
    prompt = generate_product_description(product, features, tone, audience)
    result = call_gemini(prompt)

    # 📋 Show and save result
    print("\n📝 Generated Copy:\n", result)
    save_as_pdf(result)
    print("✅ Output saved as output.pdf")

import os
import google.generativeai as genai
from fpdf import FPDF
import re # Import the re module for regular expressions

# 🔑 Set your Gemini API key here
genai.configure(api_key="AIzaSyDGDivFa-0KGtbt8f_gEb-AWbiK4vC5n6g")

# 📄 Prompt templates
def generate_product_description(product, features, tone, audience):
    return f"""
    You are a professional marketing copywriter.
    Write a compelling product description for the following:

    Product: {product}
    Features: {features}
    Target Audience: {audience}
    Tone of Voice: {tone}

    Keep it concise (2-3 sentences).
    """

# 🧠 Call Gemini API
def call_gemini(prompt):
    try:
        model = genai.GenerativeModel("gemini-pro")
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        # Remove or replace characters that might cause encoding issues
        # This uses regex to remove any character that is not a standard printable ASCII character or common punctuation/whitespace
        cleaned_error_message = re.sub(r'[^\x20-\x7E]', '', f"❌ Error generating content: {e}")
        return cleaned_error_message

# 💾 Save output as PDF
def save_as_pdf(text, filename="output.pdf"):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    # Ensure the text is suitable for the default encoding (latin-1) or a supported encoding
    # Splitting the text and adding line by line might still hit encoding issues if characters are unsupported.
    # A more robust solution for handling arbitrary text would involve using a font that supports Unicode and setting the encoding appropriately in FPDF, which is more complex.
    # For this specific error stemming from an emoji in the error message, cleaning the error message is the most direct fix.
    for line in text.split("\n"):
        pdf.multi_cell(0, 10, line)
    pdf.output(filename)

# ▶️ Main script
if __name__ == "__main__":
    print("🛍️ AI Marketing Copy Generator")

    # 👇 Collect user input
    product = input("Enter product name: ")
    features = input("Enter key features: ")
    tone = input("Enter tone (e.g., friendly, elegant): ")
    audience = input("Enter target audience: ")

    # 🔧 Generate prompt & call API
    prompt = generate_product_description(product, features, tone, audience)
    result = call_gemini(prompt)

    # 📋 Show and save result
    print("\n📝 Generated Copy:\n", result)
    save_as_pdf(result)
    print("✅ Output saved as output.pdf")

ListModels

# Use the correct function name from the genai library to list models
for model in genai.list_models():
    # You can print or process the models as needed
    print(model.name)

import os
import google.generativeai as genai
from fpdf import FPDF
import re # Import the re module for regular expressions

# 🔑 Set your Gemini API key here
genai.configure(api_key="AIzaSyDGDivFa-0KGtbt8f_gEb-AWbiK4vC5n6g")

# 📄 Prompt templates
def generate_product_description(product, features, tone, audience):
    return f"""
    You are a professional marketing copywriter.
    Write a compelling product description for the following:

    Product: {product}
    Features: {features}
    Target Audience: {audience}
    Tone of Voice: {tone}

    Keep it concise (2-3 sentences).
    """

# 🧠 Call Gemini API
def call_gemini(prompt):
    try:
        model = genai.GenerativeModel("gemini-1.5-pro")
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        # Remove or replace characters that might cause encoding issues
        # This uses regex to remove any character that is not a standard printable ASCII character or common punctuation/whitespace
        cleaned_error_message = re.sub(r'[^\x20-\x7E]', '', f"❌ Error generating content: {e}")
        return cleaned_error_message

# 💾 Save output as PDF
def save_as_pdf(text, filename="output.pdf"):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    # Ensure the text is suitable for the default encoding (latin-1) or a supported encoding
    # Splitting the text and adding line by line might still hit encoding issues if characters are unsupported.
    # A more robust solution for handling arbitrary text would involve using a font that supports Unicode and setting the encoding appropriately in FPDF, which is more complex.
    # For this specific error stemming from an emoji in the error message, cleaning the error message is the most direct fix.
    for line in text.split("\n"):
        pdf.multi_cell(0, 10, line)
    pdf.output(filename)

# ▶️ Main script
if __name__ == "__main__":
    print("🛍️ AI Marketing Copy Generator")

    # 👇 Collect user input
    product = input("Enter product name: ")
    features = input("Enter key features: ")
    tone = input("Enter tone (e.g., friendly, elegant): ")
    audience = input("Enter target audience: ")

    # 🔧 Generate prompt & call API
    prompt = generate_product_description(product, features, tone, audience)
    result = call_gemini(prompt)

    # 📋 Show and save result
    print("\n📝 Generated Copy:\n", result)
    save_as_pdf(result)
    print("✅ Output saved as output.pdf")

def prompt_social_caption(product, features, tone, audience):
    return f"""
    Write an engaging **social media caption** to promote this product:

    Product: {product}
    Features: {features}
    Target Audience: {audience}
    Tone: {tone}

    Make it attention-grabbing and include 1-2 relevant emojis.
    Keep under 280 characters.
    """

def prompt_ad_headline(product, features, tone, audience):
    return f"""
    Craft 3 punchy **advertising headlines** for this product:

    Product: {product}
    Features: {features}
    Audience: {audience}
    Tone: {tone}

    Each headline must be under 10 words, clear and high-converting.
    """

def prompt_email_intro(product, features, tone, audience):
    return f"""
    Write an inviting **email introduction paragraph** for a marketing campaign.

    Product: {product}
    Key Features: {features}
    Audience: {audience}
    Tone: {tone}

    Make the intro warm and persuasive to encourage reading more.
    """

def prompt_call_to_action(product, features, tone, audience):
    return f"""
    Generate 3 persuasive **calls-to-action (CTAs)** for this product:

    Product: {product}
    Features: {features}
    Target Audience: {audience}
    Tone: {tone}

    Each CTA should be 5-7 words and action-oriented.
    Examples: “Shop Now”, “Get Yours Today”.
    """

# 🧠 All prompt templates
def prompt_product_description(product, features, tone, audience):
    return f"""
    You are a skilled marketing copywriter.
    Write a compelling product description for the following:

    Product: {product}
    Features: {features}
    Target Audience: {audience}
    Tone of Voice: {tone}

    Limit to 2-3 concise and engaging sentences.
    """

def prompt_social_caption(product, features, tone, audience):
    return f"""
    Write an engaging social media caption to promote this product:

    Product: {product}
    Features: {features}
    Target Audience: {audience}
    Tone: {tone}

    Include 1-2 emojis and keep it under 280 characters.
    """

def prompt_ad_headline(product, features, tone, audience):
    return f"""
    Craft 3 punchy advertising headlines for this product:

    Product: {product}
    Features: {features}
    Audience: {audience}
    Tone: {tone}

    Each headline must be under 10 words.
    """

def prompt_email_intro(product, features, tone, audience):
    return f"""
    Write an inviting email introduction paragraph for a marketing campaign.

    Product: {product}
    Key Features: {features}
    Audience: {audience}
    Tone: {tone}

    Make it persuasive and friendly.
    """

def prompt_call_to_action(product, features, tone, audience):
    return f"""
    Generate 3 persuasive calls-to-action for this product:

    Product: {product}
    Features: {features}
    Target Audience: {audience}
    Tone: {tone}

    Each CTA should be 5-7 words and inspire action.
    """

# ▶️ Main script
if __name__ == "__main__":
    print("🛍️ AI Marketing Copy Generator\n")

    # 👇 Prompt type selection
    print("Choose a content type:")
    print("1. Product Description")
    print("2. Social Media Caption")
    print("3. Ad Headline")
    print("4. Email Intro")
    print("5. Call to Action")

    choice = input("Enter choice (1-5): ")

    # 👇 Collect user input
    product = input("Enter product name: ")
    features = input("Enter key features: ")
    tone = input("Enter tone (e.g., friendly, elegant): ")
    audience = input("Enter target audience: ")

    # 🔧 Generate the right prompt
    if choice == "1":
        prompt = prompt_product_description(product, features, tone, audience)
    elif choice == "2":
        prompt = prompt_social_caption(product, features, tone, audience)
    elif choice == "3":
        prompt = prompt_ad_headline(product, features, tone, audience)
    elif choice == "4":
        prompt = prompt_email_intro(product, features, tone, audience)
    elif choice == "5":
        prompt = prompt_call_to_action(product, features, tone, audience)
    else:
        print("❌ Invalid choice.")
        exit()

    # 🧠 Call the API
    result = call_gemini(prompt)

    # 📋 Show and save result
    print("\n📝 Generated Copy:\n", result)
    save_as_pdf(result)
    print("✅ Output saved as output.pdf")

# ▶️ Main script
if __name__ == "__main__":
    print("🛍️ AI Marketing Copy Generator\n")

    while True:
        # 👇 Prompt type selection menu
        print("\nChoose a content type:")
        print("1. Product Description")
        print("2. Social Media Caption")
        print("3. Ad Headline")
        print("4. Email Intro")
        print("5. Call to Action")
        print("0. Exit")

        choice = input("Enter your choice (0-5): ")

        if choice == "0":
            print("👋 Goodbye!")
            break  # Exit the loop

        # 👇 Collect user input
        product = input("\nEnter product name: ")
        features = input("Enter key features: ")
        tone = input("Enter tone (e.g., friendly, elegant): ")
        audience = input("Enter target audience: ")

        # 🔧 Generate the appropriate prompt
        if choice == "1":
            prompt = prompt_product_description(product, features, tone, audience)
        elif choice == "2":
            prompt = prompt_social_caption(product, features, tone, audience)
        elif choice == "3":
            prompt = prompt_ad_headline(product, features, tone, audience)
        elif choice == "4":
            prompt = prompt_email_intro(product, features, tone, audience)
# ▶️ Main script
if __name__ == "__main__":
    print("🛍️ AI Marketing Copy Generator\n")

    while True:
        # 👇 Prompt type selection menu
        print("\nChoose a content type:")
        print("1. Product Description")
        print("2. Social Media Caption")
        print("3. Ad Headline")
        print("4. Email Intro")
        print("5. Call to Action")
        print("0. Exit")

        choice = input("Enter your choice (0-5): ")

        if choice == "0":
            print("👋 Goodbye!")
            break  # Exit the loop

        # 👇 Collect user input
        product = input("\nEnter product name: ")
        features = input("Enter key features: ")
        tone = input("Enter tone (e.g., friendly, elegant): ")
        audience = input("Enter target audience: ")

        # 🔧 Generate the appropriate prompt
        if choice == "1":
            prompt = prompt_product_description(product, features, tone, audience)
        elif choice == "2":
            prompt = prompt_social_caption(product, features, tone, audience)
        elif choice == "3":
            prompt = prompt_ad_headline(product, features, tone, audience)
        elif choice == "4":
            prompt = prompt_email_intro(product, features, tone, audience)
        elif choice == "5":
            prompt = prompt_call_to_action(product, features, tone, audience)

# ▶️ Main script
if __name__ == "__main__":
    print("🛍️ AI Marketing Copy Generator\n")

    while True:
        # 👇 Prompt type selection menu
        print("\nChoose a content type:")
        print("1. Product Description")
        print("2. Social Media Caption")
        print("3. Ad Headline")
        print("4. Email Intro")
        print("5. Call to Action")
        print("0. Exit")

        choice = input("Enter your choice (0-5): ")

        if choice == "0":
            print("👋 Goodbye!")
            break  # Exit the loop

        # 👇 Collect user input
        product = input("\nEnter product name: ")
        features = input("Enter key features: ")
        tone = input("Enter tone (e.g., friendly, elegant): ")
        audience = input("Enter target audience: ")

        # 🔧 Generate the appropriate prompt
        if choice == "1":
            prompt = prompt_product_description(product, features, tone, audience)
        elif choice == "2":
            prompt = prompt_social_caption(product, features, tone, audience)
        elif choice == "3":
            prompt = prompt_ad_headline(product, features, tone, audience)
        elif choice == "4":
            prompt = prompt_email_intro(product, features, tone, audience) # Correctly assign prompt for email intro
        elif choice == "5":
            prompt = prompt_call_to_action(product, features, tone, audience) # Correctly assign prompt for call to action
        else:
            # Handle invalid choice within the loop
            print("❌ Invalid choice. Please enter a number between 0 and 5.")
            continue # Continue to the next iteration of the loop

        # 🧠 Call the API
        result = call_gemini(prompt)

        # 📋 Show and save result
        print("\n📝 Generated Copy:\n", result)
        save_as_pdf(result)
        print("✅ Output saved as output.pdf")

# 🧠 Call the Gemini API
result = call_gemini(prompt)

# 📋 Show and save result
print("\n📝 Generated Copy:\n", result)
filename = input("Enter a name for the output file (without .pdf): ")
save_as_pdf(result, filename=f"{filename}.pdf")
print(f"✅ Output saved as {filename}.pdf")

import google.generativeai as genai

# Set your Gemini API Key
genai.configure(api_key="AIzaSyDGDivFa-0KGtbt8f_gEb-AWbiK4vC5n6g")

# Sample prompt templates
def product_description_prompt(product, features, tone, audience):
    return f"""
    Write a compelling product description for:

    Product: {product}
    Features: {features}
    Tone: {tone}
    Target Audience: {audience}

    Keep it short and persuasive (2-3 sentences).
    """

def social_media_caption_prompt(product, vibe, platform):
    return f"""
    Write a {vibe} social media caption for the product '{product}' to be posted on {platform}.
    Make it catchy and relatable.
    """

def ad_headline_prompt(product, benefit, emotion):
    return f"""
    Create 3 punchy ad headlines for a product called '{product}' that emphasizes the benefit '{benefit}'.
    The tone should evoke the emotion: {emotion}.
    """

def blog_intro_prompt(product, topic, audience):
    return f"""
    Write an engaging blog introduction (3–4 sentences) about '{topic}' featuring the product '{product}'.
    Assume the reader is {audience}.
    """

def email_promo_prompt(product, offer, audience):
    return f"""
    Draft a promotional email (short, friendly) introducing the product '{product}' with an offer: {offer}.
    The target audience is: {audience}.
    Include a call to action.
    """

# Call Gemini
def call_gemini(prompt):
    model = genai.GenerativeModel("gemini-1.5-pro")
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"❌ Error: {e}"

# Test one prompt
if __name__ == "__main__":
    print("🧪 Testing: Social Media Caption")
    prompt = social_media_caption_prompt("Velour", "playful", "Instagram")
    result = call_gemini(prompt)
    print(result)

!pip install google-generativeai

import google.generativeai as genai
genai.configure(api_key="AIzaSyDGDivFa-0KGtbt8f_gEb-AWbiK4vC5n6g")
model = genai.GenerativeModel("gemini-1.5-pro")

prompt = "Write a romantic product description for a perfume called 'Velour'."
response = model.generate_content(prompt)
print(response.text)

import google.generativeai as genai

# Set your Gemini API Key
genai.configure(api_key="AIzaSyDGDivFa-0KGtbt8f_gEb-AWbiK4vC5n6g")

# Sample prompt templates
def product_description_prompt(product, features, tone, audience):
    return f"""
    Write a compelling product description for:

    Product: {product}
    Features: {features}
    Tone: {tone}
    Target Audience: {audience}

    Keep it short and persuasive (2-3 sentences).
    """

def social_media_caption_prompt(product, vibe, platform):
    return f"""
    Write a {vibe} social media caption for the product '{product}' to be posted on {platform}.
    Make it catchy and relatable.
    """

def ad_headline_prompt(product, benefit, emotion):
    return f"""
    Create 3 punchy ad headlines for a product called '{product}' that emphasizes the benefit '{benefit}'.
    The tone should evoke the emotion: {emotion}.
    """

def blog_intro_prompt(product, topic, audience):
    return f"""
    Write an engaging blog introduction (3–4 sentences) about '{topic}' featuring the product '{product}'.
    Assume the reader is {audience}.
    """

def email_promo_prompt(product, offer, audience):
    return f"""
    Draft a promotional email (short, friendly) introducing the product '{product}' with an offer: {offer}.
    The target audience is: {audience}.
    Include a call to action.
    """

# Call Gemini
def call_gemini(prompt):
    model = genai.GenerativeModel("gemini-1.5-pro")
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"❌ Error: {e}"

# Test one prompt
if __name__ == "__main__":
    print("🧪 email promo promt")
    prompt = email_promo_prompt("Velour", "playful" "young professionals")
    result = call_gemini(prompt)
    print(result)

import google.generativeai as genai

# Set your Gemini API Key
genai.configure(api_key="AIzaSyDGDivFa-0KGtbt8f_gEb-AWbiK4vC5n6g")

# Sample prompt templates
def product_description_prompt(product, features, tone, audience):
    return f"""
    Write a compelling product description for:

    Product: {product}
    Features: {features}
    Tone: {tone}
    Target Audience: {audience}

    Keep it short and persuasive (2-3 sentences).
    """

def social_media_caption_prompt(product, vibe, platform):
    return f"""
    Write a {vibe} social media caption for the product '{product}' to be posted on {platform}.
    Make it catchy and relatable.
    """

def ad_headline_prompt(product, benefit, emotion):
    return f"""
    Create 3 punchy ad headlines for a product called '{product}' that emphasizes the benefit '{benefit}'.
    The tone should evoke the emotion: {emotion}.
    """

def blog_intro_prompt(product, topic, audience):
    return f"""
    Write an engaging blog introduction (3–4 sentences) about '{topic}' featuring the product '{product}'.
    Assume the reader is {audience}.
    """

def email_promo_prompt(product, offer, audience):
    return f"""
    Draft a promotional email (short, friendly) introducing the product '{product}' with an offer: {offer}.
    The target audience is: {audience}.
    Include a call to action.
    """

# Call Gemini
def call_gemini(prompt):
    model = genai.GenerativeModel("gemini-1.5-pro")
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"❌ Error: {e}"

# Test one prompt
if __name__ == "__main__":
    print("🧪 email promo promt")
    # Pass "playful" as the 'offer' and "young professionals" as the 'audience'
    prompt = email_promo_prompt("Velour", "playful", "young professionals")
    result = call_gemini(prompt)
    print(result)
